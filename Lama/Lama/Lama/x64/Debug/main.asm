; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__F7309570_SDL_stdinc@h DB 01H
__DEF1ED59_SDL_endian@h DB 01H
__09340588_corecrt_math@h DB 01H
__B0C4CEA9_malloc@h DB 01H
__D291391D_SDL_rect@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__8BF91AE9_main@c DB 01H
msvcjmc	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	SDL_main
PUBLIC	error_msg
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0M@KMABGBDJ@Error?3?5?$CFs?5?6@		; `string'
PUBLIC	??_C@_0BJ@JPHBGNOG@Could?5not?5Initialise?5SDL@	; `string'
PUBLIC	??_C@_04BLKNCPFJ@Lama@				; `string'
PUBLIC	??_C@_0BK@OADPNOMO@Could?5not?5initialise?5grid@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0M@INKEKBKD@texture?4bmp@			; `string'
PUBLIC	??_C@_0BC@DPMPNCOK@Surface?5not?5valid@		; `string'
EXTRN	__imp_malloc:PROC
EXTRN	__imp_srand:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	SDL_RWFromFile:PROC
EXTRN	SDL_FreeSurface:PROC
EXTRN	SDL_LoadBMP_RW:PROC
EXTRN	SDL_SetColorKey:PROC
EXTRN	SDL_CreateWindow:PROC
EXTRN	SDL_GetMouseState:PROC
EXTRN	SDL_PollEvent:PROC
EXTRN	SDL_CreateRenderer:PROC
EXTRN	SDL_CreateTextureFromSurface:PROC
EXTRN	SDL_SetRenderDrawColor:PROC
EXTRN	SDL_RenderClear:PROC
EXTRN	SDL_RenderPresent:PROC
EXTRN	SDL_Delay:PROC
EXTRN	SDL_Init:PROC
EXTRN	SDL_Quit:PROC
EXTRN	memset:PROC
EXTRN	__imp__localtime64_s:PROC
EXTRN	__imp__time64:PROC
EXTRN	grid_init:PROC
EXTRN	grid_draw:PROC
EXTRN	grid_free_nodes:PROC
EXTRN	animation_create:PROC
EXTRN	grass_field_init:PROC
EXTRN	grass_field_update:PROC
EXTRN	grass_field_toggle_alive_at:PROC
EXTRN	grass_field_draw:PROC
EXTRN	grass_field_clean:PROC
EXTRN	sheep_flock_init:PROC
EXTRN	sheep_flock_spawn_sheep:PROC
EXTRN	sheep_flock_update:PROC
EXTRN	sheep_flock_draw:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SDL_main DD imagerel $LN21
	DD	imagerel $LN21+2267
	DD	imagerel $unwind$SDL_main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+77
	DD	imagerel $unwind$time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$localtime_s DD imagerel localtime_s
	DD	imagerel localtime_s+89
	DD	imagerel $unwind$localtime_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$error_msg DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$error_msg
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BC@DPMPNCOK@Surface?5not?5valid@
CONST	SEGMENT
??_C@_0BC@DPMPNCOK@Surface?5not?5valid@ DB 'Surface not valid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@INKEKBKD@texture?4bmp@
CONST	SEGMENT
??_C@_0M@INKEKBKD@texture?4bmp@ DB 'texture.bmp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OADPNOMO@Could?5not?5initialise?5grid@
CONST	SEGMENT
??_C@_0BK@OADPNOMO@Could?5not?5initialise?5grid@ DB 'Could not initialise'
	DB	' grid', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04BLKNCPFJ@Lama@
CONST	SEGMENT
??_C@_04BLKNCPFJ@Lama@ DB 'Lama', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JPHBGNOG@Could?5not?5Initialise?5SDL@
CONST	SEGMENT
??_C@_0BJ@JPHBGNOG@Could?5not?5Initialise?5SDL@ DB 'Could not Initialise '
	DB	'SDL', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KMABGBDJ@Error?3?5?$CFs?5?6@
CONST	SEGMENT
??_C@_0M@KMABGBDJ@Error?3?5?$CFs?5?6@ DB 'Error: %s ', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$error_msg DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$localtime_s DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time DD	025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SDL_main DD 045063f19H
	DD	01134318H
	DD	0700c0130H
	DD	0500a600bH
	DD	imagerel __GSHandlerCheck
	DD	0978H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
SDL_main$rtcName$0 DB 06dH
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+4
SDL_main$rtcName$1 DB 077H
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	073H
	DB	065H
	DB	074H
	DB	074H
	DB	069H
	DB	06eH
	DB	067H
	DB	073H
	DB	00H
SDL_main$rtcName$2 DB 065H
	DB	076H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+2
SDL_main$rtcName$3 DB 06dH
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	069H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	05fH
	DB	06fH
	DB	06eH
	DB	05fH
	DB	067H
	DB	072H
	DB	069H
	DB	064H
	DB	00H
	ORG $+1
SDL_main$rtcName$4 DB 072H
	DB	061H
	DB	077H
	DB	074H
	DB	069H
	DB	06dH
	DB	065H
	DB	00H
SDL_main$rtcName$5 DB 062H
	DB	061H
	DB	063H
	DB	06bH
	DB	067H
	DB	072H
	DB	06fH
	DB	075H
	DB	06eH
	DB	064H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	00H
	ORG $+7
SDL_main$rtcName$6 DB 067H
	DB	072H
	DB	069H
	DB	064H
	DB	05fH
	DB	06cH
	DB	061H
	DB	079H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
SDL_main$rtcName$7 DB 067H
	DB	072H
	DB	061H
	DB	073H
	DB	073H
	DB	05fH
	DB	070H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+5
SDL_main$rtcName$8 DB 067H
	DB	072H
	DB	061H
	DB	073H
	DB	073H
	DB	05fH
	DB	061H
	DB	06eH
	DB	069H
	DB	06dH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
SDL_main$rtcName$9 DB 067H
	DB	072H
	DB	061H
	DB	073H
	DB	073H
	DB	05fH
	DB	066H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+7
SDL_main$rtcName$10 DB 073H
	DB	068H
	DB	065H
	DB	065H
	DB	070H
	DB	05fH
	DB	070H
	DB	06fH
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+5
SDL_main$rtcName$11 DB 073H
	DB	068H
	DB	065H
	DB	065H
	DB	070H
	DB	05fH
	DB	061H
	DB	06eH
	DB	069H
	DB	06dH
	DB	061H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	073H
	DB	00H
	ORG $+7
SDL_main$rtcName$12 DB 073H
	DB	068H
	DB	065H
	DB	065H
	DB	070H
	DB	05fH
	DB	066H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+6
SDL_main$rtcName$13 DB 073H
	DB	070H
	DB	061H
	DB	077H
	DB	06eH
	DB	05fH
	DB	061H
	DB	074H
	DB	00H
	ORG $+15
SDL_main$rtcVarDesc DD 0598H
	DD	08H
	DQ	FLAT:SDL_main$rtcName$13
	DD	04a0H
	DD	0b4H
	DQ	FLAT:SDL_main$rtcName$12
	DD	0400H
	DD	078H
	DQ	FLAT:SDL_main$rtcName$11
	DD	03b8H
	DD	028H
	DQ	FLAT:SDL_main$rtcName$10
	DD	0320H
	DD	078H
	DQ	FLAT:SDL_main$rtcName$9
	DD	02d8H
	DD	028H
	DQ	FLAT:SDL_main$rtcName$8
	DD	0298H
	DD	028H
	DQ	FLAT:SDL_main$rtcName$7
	DD	0258H
	DD	020H
	DQ	FLAT:SDL_main$rtcName$6
	DD	0174H
	DD	04H
	DQ	FLAT:SDL_main$rtcName$5
	DD	0138H
	DD	08H
	DQ	FLAT:SDL_main$rtcName$4
	DD	0118H
	DD	08H
	DQ	FLAT:SDL_main$rtcName$3
	DD	0c8H
	DD	038H
	DQ	FLAT:SDL_main$rtcName$2
	DD	098H
	DD	018H
	DQ	FLAT:SDL_main$rtcName$1
	DD	068H
	DD	0cH
	DQ	FLAT:SDL_main$rtcName$0
	ORG $+672
SDL_main$rtcFrameData DD 0eH
	DD	00H
	DQ	FLAT:SDL_main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025054a19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\main.c
;	COMDAT error_msg
_TEXT	SEGMENT
msg$ = 224
error_msg PROC						; COMDAT

; 18   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8BF91AE9_main@c
	call	__CheckForDebuggerJustMyCode

; 19   :     printf("Error: %s \n", msg);

	mov	rdx, QWORD PTR msg$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0M@KMABGBDJ@Error?3?5?$CFs?5?6@
	call	printf

; 20   :     return -1;

	mov	eax, -1

; 21   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
error_msg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
;	COMDAT localtime_s
_TEXT	SEGMENT
_Tm$ = 224
_Time$ = 232
localtime_s PROC					; COMDAT

; 573  :             {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8AA3BE86_time@h
	call	__CheckForDebuggerJustMyCode

; 574  :                 return _localtime64_s(_Tm, _Time);

	mov	rdx, QWORD PTR _Time$[rbp]
	mov	rcx, QWORD PTR _Tm$[rbp]
	call	QWORD PTR __imp__localtime64_s

; 575  :             }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
localtime_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 224
time	PROC						; COMDAT

; 535  :         {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8AA3BE86_time@h
	call	__CheckForDebuggerJustMyCode

; 536  :             return _time64(_Time);

	mov	rcx, QWORD PTR _Time$[rbp]
	call	QWORD PTR __imp__time64

; 537  :         }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\main.c
;	COMDAT SDL_main
_TEXT	SEGMENT
index$ = 4
mouse_input$ = 40
window_settings$ = 88
event$ = 136
mouse_position_on_grid$ = 216
rawtime$ = 248
alpha_color_key$ = 276
background_color$ = 308
time_info$ = 344
texture$ = 376
surface$ = 408
window$ = 440
renderer$ = 472
running$ = 500
grid_layer$ = 536
grass_pool$ = 600
grass_animation$ = 664
grass_frame_info$ = 736
sheep_pool$ = 888
sheep_animations$ = 960
sheep_frame_infos$ = 1120
frame_count$ = 1332
spawn_at$ = 1368
$T17 = 2168
$T18 = 2232
$T19 = 2304
tv397 = 2356
__$ArrayPad$ = 2360
argc$ = 2400
argv$ = 2408
SDL_main PROC						; COMDAT

; 43   : {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2432				; 00000980H
	lea	rbp, QWORD PTR [rsp+64]
	mov	rdi, rsp
	mov	ecx, 608				; 00000260H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+2472]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8BF91AE9_main@c
	call	__CheckForDebuggerJustMyCode

; 44   :     int             index;
; 45   :     mouse           mouse_input;
; 46   :     window_info     window_settings;
; 47   :     SDL_Event       event;
; 48   :     vector2         mouse_position_on_grid;
; 49   :     time_t          rawtime;
; 50   :     Uint32          alpha_color_key;
; 51   :     SDL_Color       background_color        = { 214, 185, 123, 255};

	mov	BYTE PTR background_color$[rbp], 214	; 000000d6H
	mov	BYTE PTR background_color$[rbp+1], 185	; 000000b9H
	mov	BYTE PTR background_color$[rbp+2], 123	; 0000007bH
	mov	BYTE PTR background_color$[rbp+3], 255	; 000000ffH

; 52   :     struct tm*      time_info               = NULL;

	mov	QWORD PTR time_info$[rbp], 0

; 53   :     SDL_Texture*    texture                 = NULL;

	mov	QWORD PTR texture$[rbp], 0

; 54   :     SDL_Surface*    surface                 = NULL;

	mov	QWORD PTR surface$[rbp], 0

; 55   :     SDL_Window*     window                  = NULL;

	mov	QWORD PTR window$[rbp], 0

; 56   :     SDL_Renderer*   renderer                = NULL;

	mov	QWORD PTR renderer$[rbp], 0

; 57   :     bool            running                 = true;

	mov	BYTE PTR running$[rbp], 1

; 58   : 
; 59   :     grid            grid_layer;
; 60   : 
; 61   :     grass_field     grass_pool;
; 62   :     animation       grass_animation;
; 63   :     frame_data      grass_frame_info[6] = { {.rect = {0  , 0, 32, 32}, .frame_time = 2000 },

	mov	DWORD PTR grass_frame_info$[rbp], 0
	mov	DWORD PTR grass_frame_info$[rbp+4], 0
	mov	DWORD PTR grass_frame_info$[rbp+8], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+12], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+16], 2000 ; 000007d0H
	mov	DWORD PTR grass_frame_info$[rbp+20], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+24], 0
	mov	DWORD PTR grass_frame_info$[rbp+28], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+32], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+36], 2000 ; 000007d0H
	mov	DWORD PTR grass_frame_info$[rbp+40], 64	; 00000040H
	mov	DWORD PTR grass_frame_info$[rbp+44], 0
	mov	DWORD PTR grass_frame_info$[rbp+48], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+52], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+56], 2000 ; 000007d0H
	mov	DWORD PTR grass_frame_info$[rbp+60], 96	; 00000060H
	mov	DWORD PTR grass_frame_info$[rbp+64], 0
	mov	DWORD PTR grass_frame_info$[rbp+68], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+72], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+76], 2000 ; 000007d0H
	mov	DWORD PTR grass_frame_info$[rbp+80], 128 ; 00000080H
	mov	DWORD PTR grass_frame_info$[rbp+84], 0
	mov	DWORD PTR grass_frame_info$[rbp+88], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+92], 32	; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+96], 2000 ; 000007d0H
	mov	DWORD PTR grass_frame_info$[rbp+100], 160 ; 000000a0H
	mov	DWORD PTR grass_frame_info$[rbp+104], 0
	mov	DWORD PTR grass_frame_info$[rbp+108], 32 ; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+112], 32 ; 00000020H
	mov	DWORD PTR grass_frame_info$[rbp+116], 2000 ; 000007d0H

; 64   :                                             {.rect = {32 , 0, 32, 32}, .frame_time = 2000 },
; 65   :                                             {.rect = {64 , 0, 32, 32}, .frame_time = 2000 },
; 66   :                                             {.rect = {96 , 0, 32, 32}, .frame_time = 2000 },
; 67   :                                             {.rect = {128, 0, 32, 32}, .frame_time = 2000 },
; 68   :                                             {.rect = {160, 0, 32, 32}, .frame_time = 2000 } };
; 69   :     
; 70   :     sheep_flock     sheep_pool;
; 71   :     animation       sheep_animations[SHEEP_ANIMATION_COUNT];
; 72   :     frame_data      sheep_frame_infos[SHEEP_ANIMATION_COUNT][3] = 

	mov	DWORD PTR sheep_frame_infos$[rbp], 0
	mov	DWORD PTR sheep_frame_infos$[rbp+4], 32	; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+8], 32	; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+12], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+16], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+20], 64 ; 00000040H
	mov	DWORD PTR sheep_frame_infos$[rbp+24], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+28], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+32], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+36], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+40], 128 ; 00000080H
	mov	DWORD PTR sheep_frame_infos$[rbp+44], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+48], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+52], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+56], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+60], 0
	mov	DWORD PTR sheep_frame_infos$[rbp+64], 64 ; 00000040H
	mov	DWORD PTR sheep_frame_infos$[rbp+68], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+72], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+76], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+80], 64 ; 00000040H
	mov	DWORD PTR sheep_frame_infos$[rbp+84], 64 ; 00000040H
	mov	DWORD PTR sheep_frame_infos$[rbp+88], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+92], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+96], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+100], 128 ; 00000080H
	mov	DWORD PTR sheep_frame_infos$[rbp+104], 64 ; 00000040H
	mov	DWORD PTR sheep_frame_infos$[rbp+108], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+112], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+116], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+120], 0
	mov	DWORD PTR sheep_frame_infos$[rbp+124], 96 ; 00000060H
	mov	DWORD PTR sheep_frame_infos$[rbp+128], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+132], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+136], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+140], 64 ; 00000040H
	mov	DWORD PTR sheep_frame_infos$[rbp+144], 96 ; 00000060H
	mov	DWORD PTR sheep_frame_infos$[rbp+148], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+152], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+156], 2000 ; 000007d0H
	mov	DWORD PTR sheep_frame_infos$[rbp+160], 128 ; 00000080H
	mov	DWORD PTR sheep_frame_infos$[rbp+164], 96 ; 00000060H
	mov	DWORD PTR sheep_frame_infos$[rbp+168], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+172], 32 ; 00000020H
	mov	DWORD PTR sheep_frame_infos$[rbp+176], 2000 ; 000007d0H

; 73   :     { 
; 74   :         { {.rect = {0 ,  32, 32, 32}, .frame_time = 2000 },
; 75   :           {.rect = {64,  32, 32, 32}, .frame_time = 2000 },
; 76   :           {.rect = {128, 32, 32, 32}, .frame_time = 2000 } },
; 77   : 
; 78   :         { {.rect = {0 ,  64, 32, 32}, .frame_time = 2000 },
; 79   :           {.rect = {64,  64, 32, 32}, .frame_time = 2000 },
; 80   :           {.rect = {128, 64, 32, 32}, .frame_time = 2000 } },
; 81   : 
; 82   :         { {.rect = {0 ,  96, 32, 32}, .frame_time = 2000 },
; 83   :           {.rect = {64,  96, 32, 32}, .frame_time = 2000 },
; 84   :           {.rect = {128, 96, 32, 32}, .frame_time = 2000 } }
; 85   :     };
; 86   : 
; 87   :     // Set seed based on time
; 88   :     time(&rawtime);

	lea	rcx, QWORD PTR rawtime$[rbp]
	call	time

; 89   :     time_info = (struct tm*) malloc(sizeof(struct tm));

	mov	ecx, 36					; 00000024H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR time_info$[rbp], rax

; 90   :     localtime_s(time_info , &rawtime);

	lea	rdx, QWORD PTR rawtime$[rbp]
	mov	rcx, QWORD PTR time_info$[rbp]
	call	localtime_s

; 91   :     srand(time_info->tm_year + time_info->tm_mon + time_info->tm_min + time_info->tm_sec);

	mov	rax, QWORD PTR time_info$[rbp]
	mov	eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR time_info$[rbp]
	add	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR time_info$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR time_info$[rbp]
	add	eax, DWORD PTR [rcx]
	mov	ecx, eax
	call	QWORD PTR __imp_srand

; 92   :     
; 93   :     if(SDL_Init(SDL_INIT_EVERYTHING) != 0)

	mov	ecx, 62001				; 0000f231H
	call	SDL_Init
	test	eax, eax
	je	SHORT $LN11@SDL_main

; 94   :         return error_msg("Could not Initialise SDL");

	lea	rcx, OFFSET FLAT:??_C@_0BJ@JPHBGNOG@Could?5not?5Initialise?5SDL@
	call	error_msg
	jmp	$LN1@SDL_main
$LN11@SDL_main:

; 95   : 
; 96   :     memset(&mouse_input, NULL, sizeof(mouse_input));

	mov	r8d, 12
	xor	edx, edx
	lea	rcx, QWORD PTR mouse_input$[rbp]
	call	memset

; 97   : 
; 98   :     window_settings.title = "Lama";

	lea	rax, OFFSET FLAT:??_C@_04BLKNCPFJ@Lama@
	mov	QWORD PTR window_settings$[rbp], rax

; 99   :     window_settings.dimension.x = 640;

	mov	DWORD PTR window_settings$[rbp+16], 640	; 00000280H

; 100  :     window_settings.dimension.y = 640;

	mov	DWORD PTR window_settings$[rbp+20], 640	; 00000280H

; 101  :     window_settings.position.x = SDL_WINDOWPOS_CENTERED;

	mov	DWORD PTR window_settings$[rbp+8], 805240832 ; 2fff0000H

; 102  :     window_settings.position.y = SDL_WINDOWPOS_CENTERED;

	mov	DWORD PTR window_settings$[rbp+12], 805240832 ; 2fff0000H

; 103  : 
; 104  :     if(!grid_init(&grid_layer, window_settings.dimension, 64, 0xFF0000FF))

	mov	r9d, -16776961				; ff0000ffH
	mov	r8d, 64					; 00000040H
	mov	rdx, QWORD PTR window_settings$[rbp+16]
	lea	rcx, QWORD PTR grid_layer$[rbp]
	call	grid_init
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN12@SDL_main

; 105  :         return error_msg("Could not initialise grid");

	lea	rcx, OFFSET FLAT:??_C@_0BK@OADPNOMO@Could?5not?5initialise?5grid@
	call	error_msg
	jmp	$LN1@SDL_main
$LN12@SDL_main:

; 106  : 
; 107  :     window = SDL_CreateWindow(window_settings.title,

	mov	DWORD PTR [rsp+40], 0
	mov	eax, DWORD PTR window_settings$[rbp+20]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR window_settings$[rbp+16]
	mov	r8d, DWORD PTR window_settings$[rbp+12]
	mov	edx, DWORD PTR window_settings$[rbp+8]
	mov	rcx, QWORD PTR window_settings$[rbp]
	call	SDL_CreateWindow
	mov	QWORD PTR window$[rbp], rax

; 108  :                               window_settings.position.x,
; 109  :                               window_settings.position.y,
; 110  :                               window_settings.dimension.x,
; 111  :                               window_settings.dimension.y,
; 112  :                               NULL);
; 113  : 
; 114  :     renderer = SDL_CreateRenderer(window,

	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR window$[rbp]
	call	SDL_CreateRenderer
	mov	QWORD PTR renderer$[rbp], rax

; 115  :                                   NULL, 
; 116  :                                   NULL);
; 117  : 
; 118  : 
; 119  :     surface = SDL_LoadBMP("texture.bmp");

	lea	rdx, OFFSET FLAT:??_C@_02JDPG@rb@
	lea	rcx, OFFSET FLAT:??_C@_0M@INKEKBKD@texture?4bmp@
	call	SDL_RWFromFile
	mov	edx, 1
	mov	rcx, rax
	call	SDL_LoadBMP_RW
	mov	QWORD PTR surface$[rbp], rax

; 120  :     alpha_color_key = (244 << 16) + (93 << 8) + (146 << 0);

	mov	DWORD PTR alpha_color_key$[rbp], 16014738 ; 00f45d92H

; 121  :     if(SDL_SetColorKey(surface, SDL_TRUE, alpha_color_key) != 0)

	mov	r8d, DWORD PTR alpha_color_key$[rbp]
	mov	edx, 1
	mov	rcx, QWORD PTR surface$[rbp]
	call	SDL_SetColorKey
	test	eax, eax
	je	SHORT $LN13@SDL_main

; 122  :         return error_msg("Surface not valid");

	lea	rcx, OFFSET FLAT:??_C@_0BC@DPMPNCOK@Surface?5not?5valid@
	call	error_msg
	jmp	$LN1@SDL_main
$LN13@SDL_main:

; 123  :     texture = SDL_CreateTextureFromSurface(renderer, surface);

	mov	rdx, QWORD PTR surface$[rbp]
	mov	rcx, QWORD PTR renderer$[rbp]
	call	SDL_CreateTextureFromSurface
	mov	QWORD PTR texture$[rbp], rax

; 124  :     SDL_FreeSurface(surface);

	mov	rcx, QWORD PTR surface$[rbp]
	call	SDL_FreeSurface

; 125  : 
; 126  :     int frame_count = 6;

	mov	DWORD PTR frame_count$[rbp], 6

; 127  :     grass_animation = animation_create(texture, 

	mov	DWORD PTR [rsp+32], 2
	mov	r9d, DWORD PTR frame_count$[rbp]
	lea	r8, QWORD PTR grass_frame_info$[rbp]
	mov	rdx, QWORD PTR texture$[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	animation_create
	lea	rcx, QWORD PTR grass_animation$[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 40					; 00000028H
	rep movsb

; 128  :                                        grass_frame_info, 
; 129  :                                        frame_count,
; 130  :                                        ONCE);
; 131  :     grass_field_init(&grass_pool,

	lea	rax, QWORD PTR $T19[rbp]
	lea	rcx, QWORD PTR grass_animation$[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 40					; 00000028H
	rep movsb
	mov	eax, DWORD PTR grid_layer$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], 10000		; 00002710H
	mov	DWORD PTR [rsp+40], 2000		; 000007d0H
	mov	DWORD PTR [rsp+32], 1000		; 000003e8H
	lea	r9, QWORD PTR $T19[rbp]
	mov	r8, QWORD PTR grid_layer$[rbp+4]
	lea	rdx, QWORD PTR grid_layer$[rbp]
	lea	rcx, QWORD PTR grass_pool$[rbp]
	call	grass_field_init

; 132  :                            &grid_layer,
; 133  :                            grid_layer.dimensions,
; 134  :                            grass_animation,
; 135  :                            1000,
; 136  :                            2000,
; 137  :                            10000,
; 138  :                            grid_layer.cell_size);
; 139  : 
; 140  :     frame_count = 3;

	mov	DWORD PTR frame_count$[rbp], 3

; 141  :     for(index = 0; index < SHEEP_ANIMATION_COUNT; index++)

	mov	DWORD PTR index$[rbp], 0
	jmp	SHORT $LN4@SDL_main
$LN2@SDL_main:
	mov	eax, DWORD PTR index$[rbp]
	inc	eax
	mov	DWORD PTR index$[rbp], eax
$LN4@SDL_main:
	cmp	DWORD PTR index$[rbp], 3
	jge	SHORT $LN3@SDL_main

; 142  :         sheep_animations[index] = animation_create(texture, 

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 60				; 0000003cH
	lea	rax, QWORD PTR sheep_frame_infos$[rbp+rax]
	mov	DWORD PTR [rsp+32], 2
	mov	r9d, DWORD PTR frame_count$[rbp]
	mov	r8, rax
	mov	rdx, QWORD PTR texture$[rbp]
	lea	rcx, QWORD PTR $T18[rbp]
	call	animation_create
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	lea	rdi, QWORD PTR sheep_animations$[rbp+rcx]
	mov	rsi, rax
	mov	ecx, 40					; 00000028H
	rep movsb
	jmp	SHORT $LN2@SDL_main
$LN3@SDL_main:

; 143  :                                                    sheep_frame_infos[index], 
; 144  :                                                    frame_count, 
; 145  :                                                    ONCE);
; 146  :     sheep_flock_init(&sheep_pool, 

	mov	DWORD PTR [rsp+32], 20000		; 00004e20H
	mov	r9d, 10
	lea	r8, QWORD PTR sheep_animations$[rbp]
	lea	rdx, QWORD PTR grid_layer$[rbp]
	lea	rcx, QWORD PTR sheep_pool$[rbp]
	call	sheep_flock_init

; 147  :                      &grid_layer,
; 148  :                      sheep_animations,
; 149  :                      10,
; 150  :                      20000);
; 151  : 
; 152  : 
; 153  :     vector2 spawn_at = { 0, 0};

	mov	DWORD PTR spawn_at$[rbp], 0
	mov	DWORD PTR spawn_at$[rbp+4], 0

; 154  :     sheep_flock_spawn_sheep(&sheep_pool, spawn_at);

	mov	rdx, QWORD PTR spawn_at$[rbp]
	lea	rcx, QWORD PTR sheep_pool$[rbp]
	call	sheep_flock_spawn_sheep

; 155  :     spawn_at.x = 8;

	mov	DWORD PTR spawn_at$[rbp], 8

; 156  :     sheep_flock_spawn_sheep(&sheep_pool, spawn_at);

	mov	rdx, QWORD PTR spawn_at$[rbp]
	lea	rcx, QWORD PTR sheep_pool$[rbp]
	call	sheep_flock_spawn_sheep

; 157  :     spawn_at.y = 5;

	mov	DWORD PTR spawn_at$[rbp+4], 5

; 158  :     sheep_flock_spawn_sheep(&sheep_pool, spawn_at);

	mov	rdx, QWORD PTR spawn_at$[rbp]
	lea	rcx, QWORD PTR sheep_pool$[rbp]
	call	sheep_flock_spawn_sheep

; 159  :     spawn_at.x = 2;

	mov	DWORD PTR spawn_at$[rbp], 2

; 160  :     sheep_flock_spawn_sheep(&sheep_pool, spawn_at);

	mov	rdx, QWORD PTR spawn_at$[rbp]
	lea	rcx, QWORD PTR sheep_pool$[rbp]
	call	sheep_flock_spawn_sheep
$LN5@SDL_main:

; 161  :     //animation copy = *anim;
; 162  :     while(running)

	movzx	eax, BYTE PTR running$[rbp]
	test	eax, eax
	je	$LN6@SDL_main
$LN7@SDL_main:

; 163  :     {
; 164  :         // Input Events
; 165  :         while(SDL_PollEvent(&event))

	lea	rcx, QWORD PTR event$[rbp]
	call	SDL_PollEvent
	test	eax, eax
	je	SHORT $LN8@SDL_main

; 166  :         {
; 167  :             switch(event.type)

	mov	eax, DWORD PTR event$[rbp]
	mov	DWORD PTR tv397[rbp], eax
	cmp	DWORD PTR tv397[rbp], 1024		; 00000400H
	jb	SHORT $LN9@SDL_main
	cmp	DWORD PTR tv397[rbp], 1026		; 00000402H
	jbe	SHORT $LN14@SDL_main
	jmp	SHORT $LN9@SDL_main
$LN14@SDL_main:

; 168  :             {
; 169  :                 case SDL_MOUSEMOTION:
; 170  :                 case SDL_MOUSEBUTTONDOWN:
; 171  :                 case SDL_MOUSEBUTTONUP:
; 172  :                 mouse_input.buttons = SDL_GetMouseState(&mouse_input.position.x, 

	lea	rdx, QWORD PTR mouse_input$[rbp+4]
	lea	rcx, QWORD PTR mouse_input$[rbp]
	call	SDL_GetMouseState
	mov	DWORD PTR mouse_input$[rbp+8], eax
$LN9@SDL_main:

; 173  :                                                         &mouse_input.position.y);
; 174  :                 break;
; 175  :             }
; 176  :         }

	jmp	SHORT $LN7@SDL_main
$LN8@SDL_main:

; 177  :         if(mouse_input.buttons & LEFT_CLICK)

	mov	eax, DWORD PTR mouse_input$[rbp+8]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN15@SDL_main

; 178  :         {
; 179  :             mouse_position_on_grid.x = (int)(mouse_input.position.x / grid_layer.cell_size);

	mov	eax, DWORD PTR mouse_input$[rbp]
	cdq
	idiv	DWORD PTR grid_layer$[rbp]
	mov	DWORD PTR mouse_position_on_grid$[rbp], eax

; 180  :             mouse_position_on_grid.y = (int)(mouse_input.position.y / grid_layer.cell_size);

	mov	eax, DWORD PTR mouse_input$[rbp+4]
	cdq
	idiv	DWORD PTR grid_layer$[rbp]
	mov	DWORD PTR mouse_position_on_grid$[rbp+4], eax

; 181  : 
; 182  :             grass_field_toggle_alive_at(&grass_pool, mouse_position_on_grid, true);

	mov	r8b, 1
	mov	rdx, QWORD PTR mouse_position_on_grid$[rbp]
	lea	rcx, QWORD PTR grass_pool$[rbp]
	call	grass_field_toggle_alive_at

; 183  :         }

	jmp	SHORT $LN16@SDL_main
$LN15@SDL_main:

; 184  :         else if(mouse_input.buttons & MIDDLE_CLICK)

	mov	eax, DWORD PTR mouse_input$[rbp+8]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN17@SDL_main

; 185  :         {
; 186  : 
; 187  :         }

	jmp	SHORT $LN18@SDL_main
$LN17@SDL_main:

; 188  :         else if(mouse_input.buttons & RIGHT_CLICK)

	mov	eax, DWORD PTR mouse_input$[rbp+8]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN19@SDL_main

; 189  :         {
; 190  :             mouse_position_on_grid.x = (int)(mouse_input.position.x / grid_layer.cell_size);

	mov	eax, DWORD PTR mouse_input$[rbp]
	cdq
	idiv	DWORD PTR grid_layer$[rbp]
	mov	DWORD PTR mouse_position_on_grid$[rbp], eax

; 191  :             mouse_position_on_grid.y = (int)(mouse_input.position.y / grid_layer.cell_size);

	mov	eax, DWORD PTR mouse_input$[rbp+4]
	cdq
	idiv	DWORD PTR grid_layer$[rbp]
	mov	DWORD PTR mouse_position_on_grid$[rbp+4], eax

; 192  :             grass_field_toggle_alive_at(&grass_pool, mouse_position_on_grid, false);

	xor	r8d, r8d
	mov	rdx, QWORD PTR mouse_position_on_grid$[rbp]
	lea	rcx, QWORD PTR grass_pool$[rbp]
	call	grass_field_toggle_alive_at
$LN19@SDL_main:
$LN18@SDL_main:
$LN16@SDL_main:

; 193  :         }
; 194  : 
; 195  :         // !Input Events
; 196  : 
; 197  :         // Update
; 198  :         sheep_flock_update(&sheep_pool);

	lea	rcx, QWORD PTR sheep_pool$[rbp]
	call	sheep_flock_update

; 199  :         grass_field_update(&grass_pool);

	lea	rcx, QWORD PTR grass_pool$[rbp]
	call	grass_field_update

; 200  :         
; 201  :         // !Update
; 202  : 
; 203  :         // Render
; 204  :         SDL_SetRenderDrawColor(renderer,

	movzx	eax, BYTE PTR background_color$[rbp+3]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR background_color$[rbp+2]
	movzx	r8d, BYTE PTR background_color$[rbp+1]
	movzx	edx, BYTE PTR background_color$[rbp]
	mov	rcx, QWORD PTR renderer$[rbp]
	call	SDL_SetRenderDrawColor

; 205  :                                background_color.r,
; 206  :                                background_color.g,
; 207  :                                background_color.b,
; 208  :                                background_color.a);
; 209  :         SDL_RenderClear(renderer);

	mov	rcx, QWORD PTR renderer$[rbp]
	call	SDL_RenderClear

; 210  : 
; 211  :         grass_field_draw(renderer,

	lea	rdx, QWORD PTR grass_pool$[rbp]
	mov	rcx, QWORD PTR renderer$[rbp]
	call	grass_field_draw

; 212  :                          &grass_pool);
; 213  :         sheep_flock_draw(renderer,

	lea	rdx, QWORD PTR sheep_pool$[rbp]
	mov	rcx, QWORD PTR renderer$[rbp]
	call	sheep_flock_draw

; 214  :                          &sheep_pool);
; 215  : 
; 216  :         grid_draw(renderer, &grid_layer);

	lea	rdx, QWORD PTR grid_layer$[rbp]
	mov	rcx, QWORD PTR renderer$[rbp]
	call	grid_draw

; 217  : 
; 218  :         SDL_RenderPresent(renderer);

	mov	rcx, QWORD PTR renderer$[rbp]
	call	SDL_RenderPresent

; 219  :         // !Render
; 220  : 
; 221  :         SDL_Delay(16);

	mov	ecx, 16
	call	SDL_Delay

; 222  :     }

	jmp	$LN5@SDL_main
$LN6@SDL_main:

; 223  : 
; 224  :     grass_field_clean(&grass_pool);

	lea	rcx, QWORD PTR grass_pool$[rbp]
	call	grass_field_clean

; 225  :     grid_free_nodes(&grid_layer);

	lea	rcx, QWORD PTR grid_layer$[rbp]
	call	grid_free_nodes

; 226  : 
; 227  :     SDL_Quit();

	call	SDL_Quit

; 228  : 
; 229  :     return 0;

	xor	eax, eax
$LN1@SDL_main:

; 230  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:SDL_main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2368]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
SDL_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 248
_Format$ = 288
printf	PROC						; COMDAT

; 954  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 961  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__F66CEB67_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
