; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F7309570_SDL_stdinc@h DB 01H
__DEF1ED59_SDL_endian@h DB 01H
__D291391D_SDL_rect@h DB 01H
__09340588_corecrt_math@h DB 01H
__CB9ECF1D_animation@c DB 01H
msvcjmc	ENDS
PUBLIC	animation_create
PUBLIC	animation_animate
PUBLIC	animation_step_forward
PUBLIC	animation_step_backwards
PUBLIC	animation_draw
PUBLIC	animation_free
PUBLIC	animation_reset
PUBLIC	__JustMyCode_Default
EXTRN	SDL_SetRenderDrawColor:PROC
EXTRN	SDL_RenderFillRect:PROC
EXTRN	SDL_RenderCopy:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	abs:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$animation_create DD imagerel $LN24
	DD	imagerel $LN24+1443
	DD	imagerel $unwind$animation_create
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$animation_animate DD imagerel $LN5
	DD	imagerel $LN5+168
	DD	imagerel $unwind$animation_animate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$animation_step_forward DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$animation_step_forward
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$animation_step_backwards DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$animation_step_backwards
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$animation_draw DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$animation_draw
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$animation_free DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$animation_free
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$animation_reset DD imagerel $LN4
	DD	imagerel $LN4+96
	DD	imagerel $unwind$animation_reset
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$animation_reset DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$animation_free DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$animation_draw DD 035053401H
	DD	0118331dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$animation_step_backwards DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$animation_step_forward DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$animation_animate DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$animation_create DD 025063a01H
	DD	011e2323H
	DD	070170034H
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
animation_create$rtcName$0 DB 061H
	DB	06eH
	DB	069H
	DB	06dH
	DB	00H
	ORG $+11
animation_create$rtcVarDesc DD 088H
	DD	028H
	DQ	FLAT:animation_create$rtcName$0
	ORG $+48
animation_create$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:animation_create$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\animation.c
;	COMDAT animation_reset
_TEXT	SEGMENT
p_anim$ = 224
animation_reset PROC					; COMDAT

; 124  : {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__CB9ECF1D_animation@c
	call	__CheckForDebuggerJustMyCode

; 125  :     if(p_anim)

	cmp	QWORD PTR p_anim$[rbp], 0
	je	SHORT $LN2@animation_

; 126  :         p_anim->current = p_anim->first;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+16], rcx
$LN2@animation_:

; 127  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
animation_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\animation.c
;	COMDAT animation_free
_TEXT	SEGMENT
p_anim$ = 224
animation_free PROC					; COMDAT

; 130  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__CB9ECF1D_animation@c
	call	__CheckForDebuggerJustMyCode

; 131  :     if(p_anim)

	cmp	QWORD PTR p_anim$[rbp], 0
	je	SHORT $LN2@animation_

; 132  :     {
; 133  :         if(p_anim->frames)

	mov	rax, QWORD PTR p_anim$[rbp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN3@animation_

; 134  :             free(p_anim->frames);

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
$LN3@animation_:

; 135  :         free(p_anim);

	mov	rcx, QWORD PTR p_anim$[rbp]
	call	QWORD PTR __imp_free
$LN2@animation_:

; 136  :     }
; 137  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
animation_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\animation.c
;	COMDAT animation_draw
_TEXT	SEGMENT
p_renderer$ = 224
p_anim$ = 232
dest$ = 240
animation_draw PROC					; COMDAT

; 116  : {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__CB9ECF1D_animation@c
	call	__CheckForDebuggerJustMyCode

; 117  :     SDL_RenderCopy(p_renderer, p_anim->texture, &p_anim->current->data.rect, dest);

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	r9, QWORD PTR dest$[rbp]
	mov	r8, rax
	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR p_renderer$[rbp]
	call	SDL_RenderCopy

; 118  : 
; 119  :     SDL_SetRenderDrawColor(p_renderer, 0, 255, 0, 255);

	mov	BYTE PTR [rsp+32], 255			; 000000ffH
	xor	r9d, r9d
	mov	r8b, 255				; 000000ffH
	xor	edx, edx
	mov	rcx, QWORD PTR p_renderer$[rbp]
	call	SDL_SetRenderDrawColor

; 120  :     SDL_RenderFillRect(p_renderer, &p_anim->current->data.rect);

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rdx, rax
	mov	rcx, QWORD PTR p_renderer$[rbp]
	call	SDL_RenderFillRect

; 121  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
animation_draw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\animation.c
;	COMDAT animation_step_backwards
_TEXT	SEGMENT
p_anim$ = 224
animation_step_backwards PROC				; COMDAT

; 107  : {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__CB9ECF1D_animation@c
	call	__CheckForDebuggerJustMyCode

; 108  :     if(p_anim->current->prev)

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN2@animation_

; 109  :     {
; 110  :         p_anim->current = p_anim->current->prev;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rcx+16], rax

; 111  :         p_anim->timer = p_anim->current->data.frame_time;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR [rcx+32], eax
$LN2@animation_:

; 112  :     }
; 113  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
animation_step_backwards ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\animation.c
;	COMDAT animation_step_forward
_TEXT	SEGMENT
p_anim$ = 224
animation_step_forward PROC				; COMDAT

; 98   : {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__CB9ECF1D_animation@c
	call	__CheckForDebuggerJustMyCode

; 99   :     if(p_anim->current->next)

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN2@animation_

; 100  :     {
; 101  :         p_anim->current = p_anim->current->next;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rcx+16], rax

; 102  :         p_anim->timer = p_anim->current->data.frame_time;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR [rcx+32], eax
$LN2@animation_:

; 103  :     }
; 104  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
animation_step_forward ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\animation.c
;	COMDAT animation_animate
_TEXT	SEGMENT
p_anim$ = 224
animation_animate PROC					; COMDAT

; 85   : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__CB9ECF1D_animation@c
	call	__CheckForDebuggerJustMyCode

; 86   :     if(p_anim->current->next)

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN2@animation_

; 87   :     {
; 88   :         p_anim->timer -= FRAME_TIME;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	eax, DWORD PTR [rax+32]
	sub	eax, 16
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	DWORD PTR [rcx+32], eax

; 89   :         if(p_anim->timer < 0)

	mov	rax, QWORD PTR p_anim$[rbp]
	cmp	DWORD PTR [rax+32], 0
	jge	SHORT $LN3@animation_

; 90   :         {
; 91   :             p_anim->current = p_anim->current->next;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rcx+16], rax

; 92   :             p_anim->timer = p_anim->current->data.frame_time;

	mov	rax, QWORD PTR p_anim$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR p_anim$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR [rcx+32], eax
$LN3@animation_:
$LN2@animation_:

; 93   :         }
; 94   :     }
; 95   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
animation_animate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File E:\CPP-Programming\Lama\Lama\Lama\animation.c
;	COMDAT animation_create
_TEXT	SEGMENT
index$ = 4
data_index$ = 36
total_count$ = 68
anim$ = 104
frames$ = 168
tv197 = 372
tv166 = 372
tv64 = 372
tv355 = 376
tv344 = 376
tv331 = 376
tv316 = 376
tv299 = 376
$T4 = 416
p_texture$ = 424
data$ = 432
p_frame_count$ = 440
p_type$ = 448
animation_create PROC					; COMDAT

; 10   : {

$LN24:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	lea	rcx, OFFSET FLAT:__CB9ECF1D_animation@c
	call	__CheckForDebuggerJustMyCode

; 11   :     int             index;
; 12   :     int             data_index;
; 13   :     int             total_count;
; 14   :     animation       anim;
; 15   :     frame*          frames      = NULL;

	mov	QWORD PTR frames$[rbp], 0

; 16   : 
; 17   :     //anim = (animation*)malloc(sizeof(animation));
; 18   :     switch(p_type)

	mov	eax, DWORD PTR p_type$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN13@animation_
	cmp	DWORD PTR tv64[rbp], 1
	je	$LN15@animation_
	cmp	DWORD PTR tv64[rbp], 2
	je	$LN17@animation_
	jmp	$LN2@animation_
$LN13@animation_:

; 19   :     {
; 20   :         case LOOP:
; 21   :             total_count = p_frame_count;

	mov	eax, DWORD PTR p_frame_count$[rbp]
	mov	DWORD PTR total_count$[rbp], eax

; 22   :             frames = (frame*)calloc(total_count, sizeof(frame));

	movsxd	rax, DWORD PTR total_count$[rbp]
	mov	edx, 40					; 00000028H
	mov	rcx, rax
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR frames$[rbp], rax

; 23   :             // Create the animation in here
; 24   :             if(frames)

	cmp	QWORD PTR frames$[rbp], 0
	je	$LN14@animation_

; 25   :             {
; 26   :                 for(index = 0; index < total_count - 1; index++) //loop through all frames until the last one

	mov	DWORD PTR index$[rbp], 0
	jmp	SHORT $LN6@animation_
$LN4@animation_:
	mov	eax, DWORD PTR index$[rbp]
	inc	eax
	mov	DWORD PTR index$[rbp], eax
$LN6@animation_:
	mov	eax, DWORD PTR total_count$[rbp]
	dec	eax
	cmp	DWORD PTR index$[rbp], eax
	jge	$LN5@animation_

; 27   :                 {
; 28   :                     frames[index].data = data[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	r8, QWORD PTR data$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	lea	rsi, QWORD PTR [r8+rax]
	mov	ecx, 20
	rep movsb

; 29   :                     frames[index].next = &frames[index + 1];

	mov	eax, DWORD PTR index$[rbp]
	inc	eax
	cdqe
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+32], rax

; 30   :                     frames[index + 1].prev = &frames[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR index$[rbp]
	inc	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+24], rax

; 31   :                 }

	jmp	$LN4@animation_
$LN5@animation_:

; 32   :                 frames[index].data = data[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	rdi, QWORD PTR data$[rbp]
	mov	QWORD PTR tv299[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv299[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb

; 33   :                 frames[index].next = frames;

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rcx+rax+32], rdx

; 34   :                 frames[0].prev = &frames[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 40					; 00000028H
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+24], rax
$LN14@animation_:

; 35   :             }
; 36   :             break;

	jmp	$LN2@animation_
$LN15@animation_:

; 37   : 
; 38   :         case BOUNCE:
; 39   :             total_count = ((p_frame_count - 1) * 2);

	mov	eax, DWORD PTR p_frame_count$[rbp]
	lea	eax, DWORD PTR [rax+rax-2]
	mov	DWORD PTR total_count$[rbp], eax

; 40   :             frames = (frame*)calloc(total_count, sizeof(frame));

	movsxd	rax, DWORD PTR total_count$[rbp]
	mov	edx, 40					; 00000028H
	mov	rcx, rax
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR frames$[rbp], rax

; 41   :             if(frames)

	cmp	QWORD PTR frames$[rbp], 0
	je	$LN16@animation_

; 42   :             {
; 43   :                 for(index = 0; index < total_count - 1; index++) //loop through all frames until the last one

	mov	DWORD PTR index$[rbp], 0
	jmp	SHORT $LN9@animation_
$LN7@animation_:
	mov	eax, DWORD PTR index$[rbp]
	inc	eax
	mov	DWORD PTR index$[rbp], eax
$LN9@animation_:
	mov	eax, DWORD PTR total_count$[rbp]
	dec	eax
	cmp	DWORD PTR index$[rbp], eax
	jge	$LN8@animation_

; 44   :                 {
; 45   :                     data_index = abs(((index > p_frame_count - 1) * (total_count)) - index);

	mov	eax, DWORD PTR p_frame_count$[rbp]
	dec	eax
	cmp	DWORD PTR index$[rbp], eax
	jle	SHORT $LN20@animation_
	mov	DWORD PTR tv166[rbp], 1
	jmp	SHORT $LN21@animation_
$LN20@animation_:
	mov	DWORD PTR tv166[rbp], 0
$LN21@animation_:
	mov	eax, DWORD PTR tv166[rbp]
	imul	eax, DWORD PTR total_count$[rbp]
	sub	eax, DWORD PTR index$[rbp]
	mov	ecx, eax
	call	abs
	mov	DWORD PTR data_index$[rbp], eax

; 46   :                     frames[index].data = data[data_index]; // index + (!(index < p_frame_count - 1)) * full_count 

	movsxd	rax, DWORD PTR data_index$[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	rdi, QWORD PTR data$[rbp]
	mov	QWORD PTR tv316[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv316[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb

; 47   :                     frames[index].next = &frames[index + 1];

	mov	eax, DWORD PTR index$[rbp]
	inc	eax
	cdqe
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+32], rax

; 48   :                     frames[index + 1].prev = &frames[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR index$[rbp]
	inc	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+24], rax

; 49   :                 }

	jmp	$LN7@animation_
$LN8@animation_:

; 50   :                 data_index = abs(((index > p_frame_count - 1) * (total_count)) - index);

	mov	eax, DWORD PTR p_frame_count$[rbp]
	dec	eax
	cmp	DWORD PTR index$[rbp], eax
	jle	SHORT $LN22@animation_
	mov	DWORD PTR tv197[rbp], 1
	jmp	SHORT $LN23@animation_
$LN22@animation_:
	mov	DWORD PTR tv197[rbp], 0
$LN23@animation_:
	mov	eax, DWORD PTR tv197[rbp]
	imul	eax, DWORD PTR total_count$[rbp]
	sub	eax, DWORD PTR index$[rbp]
	mov	ecx, eax
	call	abs
	mov	DWORD PTR data_index$[rbp], eax

; 51   :                 frames[index].data = data[data_index];

	movsxd	rax, DWORD PTR data_index$[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	rdi, QWORD PTR data$[rbp]
	mov	QWORD PTR tv331[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv331[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb

; 52   :                 frames[index].next = frames;

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rcx+rax+32], rdx

; 53   :                 frames[0].prev = &frames[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 40					; 00000028H
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+24], rax
$LN16@animation_:

; 54   :             }
; 55   :             break;

	jmp	$LN2@animation_
$LN17@animation_:

; 56   : 
; 57   :         case ONCE:
; 58   :             total_count = p_frame_count;

	mov	eax, DWORD PTR p_frame_count$[rbp]
	mov	DWORD PTR total_count$[rbp], eax

; 59   :             frames = (frame*)calloc(total_count, sizeof(frame));

	movsxd	rax, DWORD PTR total_count$[rbp]
	mov	edx, 40					; 00000028H
	mov	rcx, rax
	call	QWORD PTR __imp_calloc
	mov	QWORD PTR frames$[rbp], rax

; 60   :             // Create the animation in here
; 61   :             if(frames)

	cmp	QWORD PTR frames$[rbp], 0
	je	$LN18@animation_

; 62   :             {
; 63   :                 for(index = 0; index < total_count - 1; index++) //loop through all frames until the last one

	mov	DWORD PTR index$[rbp], 0
	jmp	SHORT $LN12@animation_
$LN10@animation_:
	mov	eax, DWORD PTR index$[rbp]
	inc	eax
	mov	DWORD PTR index$[rbp], eax
$LN12@animation_:
	mov	eax, DWORD PTR total_count$[rbp]
	dec	eax
	cmp	DWORD PTR index$[rbp], eax
	jge	$LN11@animation_

; 64   :                 {
; 65   :                     frames[index].data = data[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	rdi, QWORD PTR data$[rbp]
	mov	QWORD PTR tv344[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv344[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb

; 66   :                     frames[index].next = &frames[index + 1];

	mov	eax, DWORD PTR index$[rbp]
	inc	eax
	cdqe
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+32], rax

; 67   :                     frames[index + 1].prev = &frames[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR index$[rbp]
	inc	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rdx+rcx+24], rax

; 68   :                 }

	jmp	$LN10@animation_
$LN11@animation_:

; 69   :                 frames[index].data = data[index];

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR index$[rbp]
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR frames$[rbp]
	mov	rdi, QWORD PTR data$[rbp]
	mov	QWORD PTR tv355[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv355[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb

; 70   :                 frames[index].next = NULL;

	movsxd	rax, DWORD PTR index$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rcx+rax+32], 0

; 71   :                 frames[0].prev = NULL;

	mov	eax, 40					; 00000028H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR frames$[rbp]
	mov	QWORD PTR [rcx+rax+24], 0
$LN18@animation_:
$LN2@animation_:

; 72   :             }
; 73   :             break;
; 74   :     }
; 75   : 
; 76   :     anim.current = frames;

	mov	rax, QWORD PTR frames$[rbp]
	mov	QWORD PTR anim$[rbp+16], rax

; 77   :     anim.frames = frames;

	mov	rax, QWORD PTR frames$[rbp]
	mov	QWORD PTR anim$[rbp+24], rax

; 78   :     anim.first = frames;

	mov	rax, QWORD PTR frames$[rbp]
	mov	QWORD PTR anim$[rbp+8], rax

; 79   :     anim.texture = p_texture;

	mov	rax, QWORD PTR p_texture$[rbp]
	mov	QWORD PTR anim$[rbp], rax

; 80   :     anim.timer = frames[0].data.frame_time;

	mov	eax, 40					; 00000028H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR frames$[rbp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	DWORD PTR anim$[rbp+32], eax

; 81   :     return anim;

	lea	rax, QWORD PTR anim$[rbp]
	mov	rdi, QWORD PTR $T4[rbp]
	mov	rsi, rax
	mov	ecx, 40					; 00000028H
	rep movsb
	mov	rax, QWORD PTR $T4[rbp]

; 82   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:animation_create$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+384]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
animation_create ENDP
_TEXT	ENDS
END
